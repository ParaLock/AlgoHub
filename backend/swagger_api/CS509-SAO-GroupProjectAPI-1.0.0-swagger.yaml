swagger: '2.0'
info:
  title: ams-api
  version: '1'
schemes:
  - https
tags:
  - name: algorithms
    description: Operations related to algorithms
  - name: implementations
    description: Operations related to implementations
  - name: benchmarks
    description: Operations related to benchmarks
  - name: machine configurations
    description: Operations related to machine configurations
  - name: problem instances
    description: Operations related to problem instances
  - name: users
    description: Operations related to users

paths:

  # ------------------ ALGORITHMS BEGIN ------------------------------

  /algorithms/{id}:
    get:
      tags:
        - algorithms
      summary: Get algorithm by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/AlgorithmResponse'

  /algorithms/add:
    post:
      tags:
        - algorithms
      summary: Create algorithm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: AlgorithmAddRequest
          required: true
          schema:
            $ref: '#/definitions/AlgorithmAddRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/AlgorithmAddResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'

  /algorithms/reclassify:
    post:
      tags:
        - algorithms
      summary: Reclassify algorithm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: AlgorithmReclassifyRequest
          required: true
          schema:
            $ref: '#/definitions/AlgorithmReclassifyRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/AlgorithmReclassifyResponse'

  /algorithms/remove:
    post:
      tags:
        - algorithms
      summary: Remove algorithm by id
      produces:
        - application/json
      parameters:
        - in: body
          name: RemoveAlgorithm
          required: true
          schema:
            $ref: '#/definitions/RemoveRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/RemoveResponse'

  # ------------------ ALGORITHMS END ------------------------------


  # ------------------ CLASSIFICATIONS BEGIN -----------------------
  
  /classifications/add:
    post:
      tags:
        - classifications
      summary: Create classification
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: ClassificationAddRequest
          required: true
          schema:
            $ref: '#/definitions/ClassificationAddRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ClassificationAddResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
  
  
  /classifications/{id}:
    get:
      tags:
        - classifications
      summary: Get classification by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ClassificationResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse' 

  /classifications/remove:
    post:
      tags:
        - classifications
      summary: Remove classification by id
      produces:
        - application/json
      parameters:
        - in: body
          name: RemoveClassification
          required: true
          schema:
            $ref: '#/definitions/RemoveRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/RemoveResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
            
  /classifications/merge:
    post:
      tags:
        - classifications
      summary: Merge classifications by ids
      produces:
        - application/json
      parameters:
        - name: MergeInfo
          in: body
          required: true
          schema:
            $ref: '#/definitions/ClassificationMergeRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ClassificationMergeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      
            
  # ------------------ CLASSIFICATIONS END ------------------------------



  # ------------------ IMPLEMENTATIONS BEGIN -----------------------

  /implementations/{id}:
    get:
      tags:
        - implementations
      summary: Get implementation by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ImplementationResponse'

  /implementations/add:
    post:
      tags:
        - implementations
      summary: Create Implementation
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: ImplementationAddRequest
          required: true
          schema:
            $ref: '#/definitions/ImplementationAddRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ImplementationAddResponse'

  /implementations/remove:
    post:
      tags:
        - implementations
      summary: Remove implementation with given id
      produces:
        - application/json
      parameters:
        - in: body
          name: RemoveImplementation
          required: true
          schema:
            $ref: '#/definitions/RemoveRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/RemoveResponse'

  # ------------------ IMPLEMENTATIONS END ---------------------------

  # ------------------ BENCHMARKS BEGIN ------------------------------

  /benchmarks/{id}:
    get:
      tags:
        - benchmarks
      summary: Get benchmark with given id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/BenchmarkResponse'

  /benchmarks/add:
    post:
      tags:
        - benchmarks
      summary: Create benchmarks
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: BenchmarkAddRequest
          required: true
          schema:
            $ref: '#/definitions/BenchmarkAddRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/BenchmarkAddResponse'

  /benchmarks/remove:
    post:
      tags:
        - benchmarks
      summary: Remove benchmark with given id
      produces:
        - application/json
      parameters:
        - in: body
          name: RemoveBenchmark
          required: true
          schema:
            $ref: '#/definitions/RemoveRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/RemoveResponse'

  # ------------------ BENCHMARKS END ------------------------------

  # ------------------ MACHINE CONFIGURATIONS BEGIN ----------------

  /machine-configurations/{id}:
    get:
      tags:
        - machine configurations
      summary: Get machine configuration with given id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/MachineConfigurationResponse'

  /machine-configurations/add:
    post:
      tags:
        - machine configurations
      summary: Create Implementation
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: MachineConfigurationAddRequest
          required: true
          schema:
            $ref: '#/definitions/MachineConfigurationAddRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/MachineConfigurationAddResponse'

  /machine-configurations/remove:
    post:
      tags:
        - machine configurations
      summary: Get machine configuration with given id
      produces:
        - application/json
      parameters:
        - in: body
          name: RemoveMachineConfiguration
          required: true
          schema:
            $ref: '#/definitions/RemoveRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/RemoveResponse'

  # ------------------ MACHINE CONFIGURATIONS END ----------------

  # ------------------ PROBLEM INSTANCES BEGIN -------------------

  /problem-instances/{id}:
    get:
      tags:
        - problem instances
      summary: Get problem instance by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ProblemInstanceResponse'

  /problem-instances/add:
    post:
      tags:
        - problem instances
      summary: Create problem instance
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: AddProblemInstanceRequest
          required: true
          schema:
            $ref: '#/definitions/ProblemInstanceAddRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/ProblemInstanceAddResponse'

  /problem-instances/remove:
    post:
      tags:
        - problem instances
      summary: Remove problem instance
      produces:
        - application/json
      parameters:
        - in: body
          name: RemoveProblemInstance
          required: true
          schema:
            $ref: '#/definitions/RemoveRequest'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/RemoveResponse'

  # ------------------ PROBLEM INSTANCES END -------------------

  # ------------------ USERS BEGIN -----------------------------

  /users/register:
    post:
      tags:
        - users
      summary: Register new user
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: UserRegistrationRequest
          required: true
          schema:
            $ref: '#/definitions/UserRegistrationRequest'
      responses:
        200:
          description: 200 response
          schema:
            $ref: '#/definitions/UserRegistrationResponse'

  /users/login:
    post:
      tags:
        - users
      summary: Login user with credentials
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: UserLoginRequest
          required: true
          schema:
            $ref: '#/definitions/UserLoginRequest'
      responses:
        200:
          description: 200 response
          schema:
            $ref: '#/definitions/UserLoginResponse'
  /users:
    get:
      tags:
        - users
      summary: Fetch all AMS users
      produces:
        - application/json
      responses:
        200:
          description: Users fetched
          schema:
            $ref: '#/definitions/FetchUsersResponse'
        401:
          description: Unauthorized

  /users/{id}:
    get:
      tags:
        - users
      summary: Fetch user's activity
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: User activity fetched
          schema:
            $ref: '#/definitions/UserActivityResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'


definitions:

  # ------------------ ABSTRACT DEFINITIONS BEGIN --------------------

  RemoveRequest:
    type: object
    properties:
      id:
        type: string

  RemoveResponse:
    type: object
    required:
      - statusCode
      - error
    properties:
      statusCode:
        type: integer
      error:
        type: string

  ErrorResponse:
    type: object
    properties:
      errorMessage:
        type: string
      statusCode:
        type: integer

  # ------------------ ABSTRACT DEFINITIONS ENDS --------------------

  # ------------------ ALGORITHMS BEGIN ------------------------------

  AlgorithmResponse:
    type: object
    properties:
      algorithmId:
        type: string
      status:
        type: string
      error:
        type: string

  AlgorithmAddRequest:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      parentClassificationId:
        type: string

  AlgorithmAddResponse:
    type: object
    properties:
      algorithmId:
        type: string
      status:
        type: string
      error:
        type: string

  AlgorithmReclassifyResponse:
    type: object
    properties:
      algorithmId:
        type: string
      status:
        type: string
      error:
        type: string

  AlgorithmReclassifyRequest:
    type: object
    properties:
      algorithmId:
        type: string
      newClassificationId:
        type: string

  # ------------------ ALGORITHMS END ------------------------------


  # ------------------ CLASSIFICATIONS BEGIN -----------------------

  ClassificationAddRequest:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      parentClassificationId:
        type: string

  ClassificationAddResponse:
    type: object
    properties:
      classificationId:
        type: string
      status:
        type: string
      error:
        type: string
  
  ClassificationResponse:
    type: object
    properties:
      classificationId:
        type: string
      status:
        type: string
      error:
        type: string
        
  ClassificationMergeRequest:
    type: object
    properties:
      classificationAId:
        type: string
      classificationBId:
        type: string
      status:
        type: string
      error:
        type: string
        
  ClassificationMergeResponse:
    type: object
    properties:
      classificationId:
        type: string
      status:
        type: string
      error:
        type: string


  # ------------------ CLASSIFICATIONS END ------------------------------


  # ------------------ IMPLEMENTATIONS BEGIN -----------------------

  ImplementationResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      sourceCode:
        type: string
      parentAlgorithm:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  ImplementationAddRequest:
    type: object
    properties:
      name:
        type: string
      parentAlgorithm:
        type: string
      sourceCode:
        type: string

  ImplementationAddResponse:
    type: object
    properties:
      implementationId:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  # ------------------ IMPLEMENTATIONS END -----------------------

  # ------------------ BENCHMARKS BEGIN --------------------------

  BenchmarkResponse:
    type: object
    properties:
      benchmarkId:
        type: string
      name:
        type: string
      parentImplementation:
        type: string
      languageName:
        type: string
      executionTime:
        type: number
      memoryUsage:
        type: number
      machineConfigurationId:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  BenchmarkAddRequest:
    type: object
    properties:
      name:
        type: string
      parentImplementation:
        type: string
      languageName:
        type: string
      executionTime:
        type: number
      memoryUsage:
        type: number
      machineConfigurationId:
        type: string

  BenchmarkAddResponse:
    type: object
    properties:
      benchmarkId:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  # ------------------ BENCHMARKS END -----------------------------

  # ------------------ MACHINE CONFIGURATIONS BEGIN ---------------

  MachineConfigurationResponse:
    type: object
    properties:
      memorySize:
        type: string
      CPU:
        type: string
      L1Size:
        type: string
      L2Size:
        type: string
      L3Size:
        type: string
      cores:
        type: integer
      threads:
        type: integer
      statusCode:
        type: integer
      error:
        type: string

  MachineConfigurationAddRequest:
    type: object
    properties:
      memorySize:
        type: string
      CPU:
        type: string
      L1Size:
        type: string
      L2Size:
        type: string
      L3Size:
        type: string
      cores:
        type: integer
      threads:
        type: integer

  MachineConfigurationAddResponse:
    type: object
    properties:
      machineConfigurationId:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  # ------------------ MACHINE CONFIGURATIONS END ---------------

  # ------------------ PROBLEM INSTANCES BEGIN ------------------

  ProblemInstanceResponse:
    type: object
    properties:
      name:
        type: string
      datasetSize:
        type: string
      problemType:
        type: string
      description:
        type: string
      dataset:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  ProblemInstanceAddRequest:
    type: object
    properties:
      name:
        type: string
      datasetSize:
        type: string
      problemType:
        type: string
      description:
        type: string
      dataset:
        type: string

  ProblemInstanceAddResponse:
    type: object
    properties:
      problemInstanceId:
        type: string
      statusCode:
        type: integer
      error:
        type: string

  # ------------------ PROBLEM INSTANCES END ------------------

  # ------------------ USERS BEGIN ----------------------------

  UserRegistrationRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  UserRegistrationResponse:
    type: object
    required:
      - error
      - statusCode
    properties:
      isRegistered:
        type: boolean
      statusCode:
        type: integer
      error:
        type: string

  UserLoginRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  UserLoginResponse:
    type: object
    required:
      - error
      - statusCode
    properties:
      isLogedIn:
        type: boolean
      statusCode:
        type: integer
      error:
        type: string

  FetchUsersResponse:
    type: object
    required:
      - error
      - statusCode
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/UserResponse'
      statusCode:
        type: integer
      error:
        type: string

  UserResponse:
    type: object
    properties:
      id:
        type: string
      username:
        type: string

  UserActivityResponse:
    type: object
    properties:
      algorithms:
        type: array
        items:
          $ref: '#/definitions/AlgorithmResponse'
      implementations:
        type: array
        items:
          $ref: '#/definitions/ImplementationResponse'
      problemInstances:
        type: array
        items:
          $ref: '#/definitions/ProblemInstanceResponse'
      machineConfigurations:
        type: array
        items:
          $ref: '#/definitions/MachineConfigurationResponse'

host: virtserver.swaggerhub.com
basePath: /wpi-cs509-sao/algohub-api/1